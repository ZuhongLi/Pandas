一、Series操作
1.
s = pd.Series(5, index=[0, 1, 2, 3])重复插入一个元素以匹配索引长度
s = pd.Series(5, index=[0, 1, 2, 3])print s
0 5
1 5
2 5
3 5
dtype: int64

二、DataFrame
1.
DataFrame 是二维数据结构，即数据以行和列的表格方式排列
pandas.DataFrame( data, index, columns, dtype, copy)
2、
显示如何使用字典，行索引和列索引列表创建数据帧(DataFrame)
data = [{'a': 1, 'b': 2},{'a': 5, 'b': 10, 'c': 20}]
#With two column indices, values same as dictionary keys
df1 = pd.DataFrame(data, index=['first', 'second'],
columns=['a', 'b']）
3、
字典的系列可以传递以形成一个DataFrame。 所得到的索引是通过的所有系列索引的并集
d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']),
'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
df = pd.DataFrame(d)print df
4、
通过向现有数据框添加一个新列
d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']),
'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

df = pd.DataFrame(d)
# Adding a new column to an existing DataFrame object with column label by passing new series
print ("Adding a new column by passing as Series:")
df['three']=pd.Series([10,20,30],index=['a','b','c'])print df
print ("Adding a new column using the existing columns in DataFrame:")
df['four']=df['one']+df['three']
print df
5、
列可以删除或弹出
d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']),
'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd']),
'three' : pd.Series([10,20,30], index=['a','b','c'])}
df = pd.DataFrame(d)print ("Our dataframe is:")print df
# using del functionprint ("Deleting the first column using DEL function:")
del df['one']
print df
6、
行选择
df.loc['b']
d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']),
'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

df = pd.DataFrame(d)print df.loc['b']
7、
使用append()函数将新行添加到DataFrame。 此功能将附加行结束。
df = pd.DataFrame([[1, 2], [3, 4]], columns = ['a','b'])
df2 = pd.DataFrame([[5, 6], [7, 8]], columns = ['a','b'])
df = df.append(df2)print df
8、
使用索引标签从DataFrame中删除或删除行。 如果标签重复，则会删除多行。
df = pd.DataFrame([[1, 2], [3, 4]], columns = ['a','b'])
df2 = pd.DataFrame([[5, 6], [7, 8]], columns = ['a','b'])
df = df.append(df2)
# Drop rows with label 0
df = df.drop(0)
print df
