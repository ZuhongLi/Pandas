一、Pandas函数应用
1、
pipe()
df = pd.DataFrame(np.random.randn(5,3),columns=['col1','col2','col3'])
df.pipe(adder,2)print df

2、
显示如何使用字典，行索引和列索引列表创建数据帧(DataFrame)
data = [{'a': 1, 'b': 2},{'a': 5, 'b': 10, 'c': 20}]
#With two column indices, values same as dictionary keys
df1 = pd.DataFrame(data, index=['first', 'second'],
columns=['a', 'b']）



二、Pandas重建索引
1.
df.reindex(index=[0,2,5], columns=['A', 'C', 'B'])
df = pd.DataFrame({
'A': pd.date_range(start='2016-01-01',periods=N,freq='D'),
'x': np.linspace(0,stop=N-1,num=N),
'y': np.random.rand(N),
'C': np.random.choice(['Low','Medium','High'],N).tolist(),
'D': np.random.normal(100, 10, size=(N)).tolist()})
#reindex the DataFrame
df_reindexed = df.reindex(index=[0,2,5], columns=['A', 'C', 'B'])

2、
df1.reindex_like(df2) 有时可能希望采取一个对象和重新索引，其轴被标记为与另一个对象相同，让df1的格式匹配到df2的格式。
df1 = pd.DataFrame(np.random.randn(10,3),columns=['col1','col2','col3'])
df2 = pd.DataFrame(np.random.randn(7,3),columns=['col1','col2','col3'])
df1 = df1.reindex_like(df2)print df1

3、
reindex()：pad/ffill - 向前填充值bfill/backfill - 向后填充值nearest - 从最近的索引值填充
df1 = pd.DataFrame(np.random.randn(6,3),columns=['col1','col2','col3'])
df2 = pd.DataFrame(np.random.randn(2,3),columns=['col1','col2','col3'])
# Padding NAN'sprint df2.reindex_like(df1)
# Now Fill the NAN's with preceding Valuesprint ("Data Frame with Forward Fill:")print df2.reindex_like(df1,method='ffill')
print df2.reindex_like(df1,method='ffill',limit=1)（limit限制填充的行数）

4、
rename()方法允许基于一些映射(字典或者系列)或任意函数来重新标记一个轴。
看看下面的例子来理解这一概念。
df1 = pd.DataFrame(np.random.randn(6,3),columns=['col1','col2','col3'])print df1
print ("After renaming the rows and columns:")print df1.rename(columns={'col1' : 'c1', 'col2' : 'c2'},
index = {0 : 'apple', 1 : 'banana', 2 : 'durian'})


三、Pandas迭代
1.
iteritems()示例
df = pd.DataFrame(np.random.randn(4,3),columns=['col1','col2','col3'])for key,value in df.iteritems():
print (key,value)

2、
iterrows()返回迭代器，产生每个索引值以及包含每行数据的序列
df = pd.DataFrame(np.random.randn(4,3),columns = ['col1','col2','col3'])for row_index,row in df.iterrows():
print (row_index,row)

3、
itertuples()方法将为DataFrame中的每一行返回一个产生一个命名元组的迭代器。元组的第一个元素将是行的相应索引值，而剩余的值是行值。
df = pd.DataFrame(np.random.randn(4,3),columns = ['col1','col2','col3'])
for row in df.itertuples():
print (row)

四、Pandas排序
1.
使用sort_index()方法，通过传递axis参数和排序顺序，可以对DataFrame进行排序。 默认情况下，按照升序对行标签进行排序
unsorted_df = pd.DataFrame(np.random.randn(10,2),index=[1,4,6,2,3,5,9,8,0,7],
columns = ['col2','col1'])
sorted_df=unsorted_df.sort_index()print (sorted_df)
2、
通过将布尔值传递给升序参数，可以控制排序顺序。 来看看下面的例子来理解一下
unsorted_df = pd.DataFrame(np.random.randn(10,2),index=[1,4,6,2,3,5,9,8,0,7],columns = ['col2','col1'])
sorted_df = unsorted_df.sort_index(ascending=False)print (sorted_df)

3、
过传递axis参数值为0或1，可以对列标签进行排序。 默认情况下，axis = 0，逐行排列。
unsorted_df = pd.DataFrame(np.random.randn(10,2),index=[1,4,6,2,3,5,9,8,0,7],columns = ['col2','col1'])
sorted_df=unsorted_df.sort_index(axis=1)
print (sorted_df)

4、
像索引排序一样，sort_values()是按值排序的方法。它接受一个by参数，它将使用要与其排序值的DataFrame的列名称。
unsorted_df = pd.DataFrame({'col1':[2,1,1,1],'col2':[1,3,2,4]})
sorted_df = unsorted_df.sort_values(by='col1')

print (sorted_df)

五、Pandas字符串和文本数据

1、
lower()
将Series/Index中的字符串转换为小写。
s = pd.Series(['Tom', 'William Rick', 'John', 'Alber@t', np.nan, '1234','SteveMinsu'])
print (s.str.lower())

2、
upper()
将Series/Index中的字符串转换为大写。
s = pd.Series(['Tom', 'William Rick', 'John', 'Alber@t', np.nan, '1234','SteveMinsu'])
print (s.str.upper())

3、
len()
计算字符串长度。
s = pd.Series(['Tom', 'William Rick', 'John', 'Alber@t', np.nan, '1234','SteveMinsu'])
print (s.str.len())

4、
strip()
帮助从两侧的系列/索引中的每个字符串中删除空格(包括换行符)。
s = pd.Series(['Tom ', ' William Rick', 'John', 'Alber@t'])
print (s.str.strip())

5、
split(' ')
用给定的模式拆分每个字符串。
s = pd.Series(['Tom ', ' William Rick', 'John', 'Alber@t'])
print (s.str.split(' '))

6、
cat(sep=' ')
使用给定的分隔符连接系列/索引元素。
s = pd.Series(['Tom ', ' William Rick', 'John', 'Alber@t'])
print (s.str.cat(sep=' <=> '))

7、
get_dummies()
返回具有单热编码值的数据帧(DataFrame)。
s = pd.Series(['Tom ', ' William Rick', 'John', 'Alber@t'])

print (s.str.get_dummies())
8、
contains(pattern)
如果元素中包含子字符串，则返回每个元素的布尔值True，否则为False。
s = pd.Series(['Tom ', ' William Rick', 'John', 'Alber@t'])
print (s.str.contains(' '))

9、
replace(a,b)
将值a替换为值b。
s = pd.Series(['Tom ', ' William Rick', 'John', 'Alber@t'])
print (s.str.replace('@','$'))

10、
repeat(value)
重复每个元素指定的次数。
s = pd.Series(['Tom ', ' William Rick', 'John', 'Alber@t'])
print (s.str.repeat(2))
11、
count(pattern)
返回模式中每个元素的出现总数。
s = pd.Series(['Tom ', ' William Rick', 'John', 'Alber@t'])
print (s.str.count('m'))

12、
startswith(pattern)
如果系列/索引中的元素以模式开始，则返回true。
s = pd.Series(['Tom ', ' William Rick', 'John', 'Alber@t'])
print (s.str. startswith ('T'))
13、
endswith(pattern)
如果系列/索引中的元素以模式结束，则返回true。
s = pd.Series(['Tom ', ' William Rick', 'John', 'Alber@t'])
print (s.str.endswith('t'))

14、
find(pattern)
返回模式第一次出现的位置。
s = pd.Series(['Tom ', ' William Rick', 'John', 'Alber@t'])
print (s.str.find('e'))

15、
findall(pattern)
返回模式的所有出现的列表。
s = pd.Series(['Tom ', ' William Rick', 'John', 'Alber@t'])
print (s.str.findall('e'))

16、
swapcase
变换字母大小写。
s = pd.Series(['Tom', 'William Rick', 'John', 'Alber@t'])
print (s.str.swapcase())

17、
islower()
检查系列/索引中每个字符串中的所有字符是否小写，返回布尔值
s = pd.Series(['Tom', 'William Rick', 'John', 'Alber@t'])
print (s.str.islower())

18、
isupper()
检查系列/索引中每个字符串中的所有字符是否大写，返回布尔值
s = pd.Series(['TOM', 'William Rick', 'John', 'Alber@t'])
print (s.str.isupper())

19、
isnumeric()
检查系列/索引中每个字符串中的所有字符是否为数字，返回布尔值。
s = pd.Series(['Tom', '1199','William Rick', 'John', 'Alber@t'])
print (s.str.isnumeric()
